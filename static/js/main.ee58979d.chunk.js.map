{"version":3,"sources":["components/Todolist/index.js","serviceWorker.js","index.js"],"names":["Todolist","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inputTxt","list","txt","checked","handleInputChange","bind","assertThisInitialized","handleAddItem","handleComplete","handleRemoveItem","handleEditItem","e","setState","target","value","preventDefault","concat","toConsumableArray","splice","index","event","map","item","_index","objectSpread","react_default","a","createElement","className","onSubmit","type","placeholder","onChange","Todolist_List","Component","List","_this2","_this3","_this$props","filter","length","key","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_components_Todolist","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ee58979d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './index.css';\n\nclass Todolist extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            inputTxt: '',\n            list: [\n                {\n                    txt: \"测试待办事项一\",\n                    checked: false\n                },\n                {\n                    txt: \"测试待办事项二\",\n                    checked: false\n                },\n                {\n                    txt: \"测试待办事项三\",\n                    checked: true\n                },\n                {\n                    txt: \"测试待办事项四\",\n                    checked: true\n                }\n            ]\n        }\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleAddItem = this.handleAddItem.bind(this);\n        this.handleComplete = this.handleComplete.bind(this);\n        this.handleRemoveItem = this.handleRemoveItem.bind(this);\n        this.handleEditItem = this.handleEditItem.bind(this);\n    }\n    // 输入待办事项\n    handleInputChange (e) {\n        this.setState({\n            inputTxt: e.target.value\n        })\n    }\n    // 添加待办事项\n    handleAddItem (e) {\n        e.preventDefault();\n        this.setState({\n            inputTxt: '',\n            list: [{ txt: this.state.inputTxt, checked: false }, ...this.state.list]\n        })\n    }\n    // 完成待办事项\n    handleComplete (e) {\n        let list = this.state.list;\n        list[e].checked = !list[e].checked;\n        this.setState({\n            list: list\n        })\n    }\n    // 删除待办事项\n    handleRemoveItem (e) {\n        let list = this.state.list;\n        list.splice(e, 1);\n        this.setState({\n            list: list\n        })\n    }\n    // 编辑待办事项\n    handleEditItem (index, event) {\n        this.setState({\n            list: this.state.list.map((item, _index) => _index === index ? { ...item, txt: event.target.value } : item)\n        });\n    }\n    render () {\n        return (\n            <div className=\"Todolist\">\n                <h1>Todolist</h1>\n                <form onSubmit={this.handleAddItem}>\n                    <input\n                        type=\"text\"\n                        className=\"Todolist__input\"\n                        placeholder=\"请输入待办事项\"\n                        onChange={this.handleInputChange}\n                        value={this.state.inputTxt}\n                    />\n                </form>\n                <List list={this.state.list} handleComplete={this.handleComplete} handleRemoveItem={this.handleRemoveItem} handleEditItem={this.handleEditItem} />\n            </div>\n        );\n    }\n}\nclass List extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n    render () {\n        const { list, handleComplete, handleRemoveItem, handleEditItem } = this.props;\n        return (\n            <div>\n                {/* 正在进行 */}\n                <h4><span className=\"number-box\">{list.filter(item => item.checked === false).length}</span>正在进行</h4>\n                <ul className=\"List\">\n                    {\n                        list.map((item, index) =>\n                            !item.checked && <li\n                                className=\"List__item\"\n                                key={index}\n                            >\n                                <span className=\"List__item--remove\" onClick={handleRemoveItem.bind(this, index)}>X</span>\n                                <div className={item.checked ? 'List__item--complete' : null}>\n                                    <input\n                                        type=\"checkbox\"\n                                        checked={item.checked}\n                                        onChange={handleComplete.bind(this, index)}\n                                    />\n                                    <input\n                                        type=\"text\"\n                                        value={item.txt}\n                                        onChange={handleEditItem.bind(this, index)}\n                                        className=\"List__value\" />\n                                </div>\n                            </li>\n                        )\n                    }\n                </ul>\n                {/* 已经完成 */}\n                <h4><span className=\"number-box\">{list.filter(item => item.checked === true).length}</span>已经完成</h4>\n                <ul className=\"List\">\n                    {\n                        list.map((item, index) =>\n                            item.checked && <li\n                                className=\"List__item\"\n                                key={index}\n                            >\n                                <span className=\"List__item--remove\" onClick={handleRemoveItem.bind(this, index)}>X</span>\n                                <div className={item.checked ? 'List__item--complete' : null}>\n                                    <input\n                                        type=\"checkbox\"\n                                        checked={item.checked}\n                                        onChange={handleComplete.bind(this, index)}\n                                    />{item.txt}\n                                </div>\n                            </li>\n                        )\n                    }\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default Todolist;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Todolist from './components/Todolist';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Todolist />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}