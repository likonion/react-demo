{"version":3,"sources":["store/reducer.js","store/index.js","store/actionTypes.js","components/Todolist/index.js","store/actionCreators.js","serviceWorker.js","index.js"],"names":["defaultState","inputTxt","list","txt","checked","store","createStore","state","arguments","length","undefined","action","type","newState","JSON","parse","stringify","value","unshift","splice","index","event","target","Todolist","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getState","handleInputChange","bind","assertThisInitialized","handleAddItem","handleToggleItem","handleRemoveItem","handleEditItem","handleStoreChange","subscribe","e","dispatch","setState","preventDefault","getItemToggleAction","getItemDeleteAction","getItemEditAction","react_default","a","createElement","className","onSubmit","input","placeholder","onChange","Todolist_ListWrapper","Component","ListWrapper","_this2","_this3","_this$props","es_list","size","split","header","badge","style","backgroundColor","count","filter","item","dataSource","renderItem","Fragment","Item","key","addonBefore","es_checkbox","addonAfter","icon","onClick","Meta","avatar","description","es_button","Boolean","window","location","hostname","match","ReactDOM","render","src_components_Todolist","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.92b79e66.chunk.js","sourcesContent":["import { CHANGE_INPUT_VALUE, ADD_TODO_ITEM, DELETE_TODO_ITEM, TOGGLE_TODO_ITEM, EDIT_TODO_ITEM } from './actionTypes'\n// 1. 我们定义一个数据 defaultState\nconst defaultState = {\n    inputTxt: '',\n    list: [\n        {\n            txt: \"测试待办事项一\",\n            checked: false\n        },\n        {\n            txt: \"测试待办事项二\",\n            checked: false\n        },\n        {\n            txt: \"测试待办事项三\",\n            checked: true\n        },\n        {\n            txt: \"测试待办事项四\",\n            checked: true\n        }\n    ]\n}\n\n// 将数据 defaultState 最终以 state 形式导出去\nexport default (state = defaultState, action) => {\n    // 打印 state 和 action\n    // console.log(state);\n    // console.log(action);\n\n    // 在 reducer.js 中获取数据，并 return 回去处理结果\n    if (action.type === CHANGE_INPUT_VALUE) {\n        const newState = JSON.parse(JSON.stringify(state));\n        newState.inputTxt = action.value;\n        return newState;\n    }\n\n    // 5. 在 reducer.js 中获取数据，并 return 回去处理结果\n    if (action.type === ADD_TODO_ITEM) {\n        const newState = JSON.parse(JSON.stringify(state));\n        newState.list.unshift({\n            txt: newState.inputTxt,\n            checked: false\n        });\n        newState.inputTxt = '';\n        return newState;\n    }\n    // 4. 在 reducer.js 中获取数据，并 return 回去处理结果\n    if (action.type === DELETE_TODO_ITEM) {\n        const newState = JSON.parse(JSON.stringify(state));\n        newState.list.splice(action.index, 1);\n        return newState;\n    }\n    if (action.type === TOGGLE_TODO_ITEM) {\n        const newState = JSON.parse(JSON.stringify(state));\n        newState.list[action.index].checked = !newState.list[action.index].checked;\n        return newState;\n    }\n    if (action.type === EDIT_TODO_ITEM) {\n        const newState = JSON.parse(JSON.stringify(state));\n        newState.list[action.index].txt = action.event.target.value;\n        return newState;\n    }\n\n    return state;\n}\n","import { createStore } from 'redux'; // 3. 我们引用 redux 这个库中的 createStore\nimport reducer from './reducer'; // 4. 我们引用 reducer.js 中导出的数据\n\n// 5. 我们通过 redux 提供的方法 reducer 来构建一个数据存储仓库\nconst store = createStore(reducer);\n\n// 6. 我们将 store 导出去\nexport default store;","// 1. 定义 actionTypes\nexport const CHANGE_INPUT_VALUE = 'change_input_value';\nexport const ADD_TODO_ITEM =  'add_todo_item';\nexport const DELETE_TODO_ITEM = 'delete_todo_item';\nexport const TOGGLE_TODO_ITEM = 'toggle_todo_item';\nexport const EDIT_TODO_ITEM = 'edit_todo_item';","import React, { Component } from 'react';\nimport { Input, List, Badge, Icon, Button, Checkbox } from 'antd';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport store from '../../store';\n// 3. 引入 actionCreators\nimport { getInputChangeAction, getAddItemAction, getItemDeleteAction, getItemToggleAction, getItemEditAction } from '../../store/actionCreators';\n\nclass Todolist extends Component {\n    constructor(props) {\n        super(props);\n        this.state = store.getState();\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleAddItem = this.handleAddItem.bind(this);\n        this.handleToggleItem = this.handleToggleItem.bind(this);\n        this.handleRemoveItem = this.handleRemoveItem.bind(this);\n        this.handleEditItem = this.handleEditItem.bind(this);\n        // 绑定方法 handleStoreChange 来处理 Redux 返回回来的数据\n        this.handleStoreChange = this.handleStoreChange.bind(this);\n        store.subscribe(this.handleStoreChange);\n    }\n    // 输入待办事项\n    handleInputChange (e) {\n        const action = getInputChangeAction(e.target.value);\n        store.dispatch(action);\n    }\n    // 在 handleStoreChange 中处理数据\n    handleStoreChange () {\n        this.setState(store.getState());\n    }\n    // 添加待办事项\n    handleAddItem (e) {\n        e.preventDefault();\n        // 4. 通过 dispatch(action)，将数据传递给 store\n        const action = getAddItemAction();\n        store.dispatch(action);\n    }\n    // 完成 && 取消完成待办事项\n    handleToggleItem (index) {\n        const action = getItemToggleAction(index);\n        store.dispatch(action);\n    }\n    // 删除待办事项\n    handleRemoveItem (index) {\n        // 3. 通过 dispatch(action)，将数据传递给 store\n        const action = getItemDeleteAction(index);\n        store.dispatch(action);\n    }\n    // 编辑待办事项\n    handleEditItem (index, event) {\n        const action = getItemEditAction(index, event);\n        store.dispatch(action);\n    }\n    render () {\n        return (\n            <div className=\"Todolist\">\n                <h1>Todolist</h1>\n                <form onSubmit={this.handleAddItem}>\n                    <Input\n                        type=\"text\"\n                        className=\"Todolist__input\"\n                        placeholder=\"请输入待办事项\"\n                        onChange={this.handleInputChange}\n                        value={this.state.inputTxt}\n                    />\n                </form>\n                <ListWrapper list={this.state.list} handleToggleItem={this.handleToggleItem} handleRemoveItem={this.handleRemoveItem} handleEditItem={this.handleEditItem} />\n            </div>\n        );\n    }\n}\nclass ListWrapper extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n    render () {\n        const { list, handleToggleItem, handleRemoveItem, handleEditItem } = this.props;\n        return (\n            <div>\n                {/* 正在进行 */}\n                <List\n                    size=\"small\"\n                    split={false}\n                    header={\n                        <h4>\n                            <Badge\n                                style={{ backgroundColor: '#52c41a' }}\n                                className=\"number-box\"\n                                count={list.filter(item => item.checked === false).length}\n                            />\n                            正在进行\n                        </h4>\n                    }\n                    dataSource={list}\n                    renderItem={(item, index) => {\n                        if (item.checked) {\n                            return <React.Fragment></React.Fragment>\n                        } else {\n                            return <List.Item key={index}>\n                                <Input\n                                    type=\"text\"\n                                    value={item.txt}\n                                    onChange={handleEditItem.bind(this, index)}\n                                    addonBefore={<Checkbox\n                                        checked={item.checked}\n                                        onChange={handleToggleItem.bind(this, index)}\n                                    />}\n                                    addonAfter={<Icon onClick={handleRemoveItem.bind(this, index)} type=\"delete\" />}\n                                />\n\n                            </List.Item>\n                        }\n                    }}\n                />\n                {/* 已经完成 */}\n                <List\n                    size=\"small\"\n                    header={\n                        <h4>\n                            <Badge\n                                style={{ backgroundColor: '#52c41a' }}\n                                className=\"number-box\"\n                                count={list.filter(item => item.checked === true).length}\n                            />\n                            已经完成\n                        </h4>\n                    }\n                    dataSource={list}\n                    renderItem={(item, index) => {\n                        if (!item.checked) {\n                            return <React.Fragment></React.Fragment>\n                        } else {\n                            return <List.Item key={index}>\n                                <List.Item.Meta\n                                    avatar={<Checkbox\n                                        checked={item.checked}\n                                        onChange={handleToggleItem.bind(this, index)}\n                                    />}\n                                    description={\n                                        item.txt\n                                    }\n                                />\n                                <Button type=\"danger\" onClick={handleRemoveItem.bind(this, index)}><Icon type=\"delete\" /></Button>\n                            </List.Item>\n                        }\n                    }}\n                />\n            </div>\n        )\n    }\n}\n\nexport default Todolist;","// 1. 引入 actionTypes\nimport { CHANGE_INPUT_VALUE, ADD_TODO_ITEM, DELETE_TODO_ITEM, TOGGLE_TODO_ITEM, EDIT_TODO_ITEM } from './actionTypes'\n\n// 2. 导出相应 action\nexport const getInputChangeAction = (value) => ({\n  type: CHANGE_INPUT_VALUE,\n  value\n})\n\nexport const getAddItemAction = () => ({\n  type: ADD_TODO_ITEM\n})\n\nexport const getItemDeleteAction = (index) => ({\n  type: DELETE_TODO_ITEM,\n  index\n})\n\nexport const getItemToggleAction = (index) => ({\n  type: TOGGLE_TODO_ITEM,\n  index\n})\n\nexport const getItemEditAction = (index, event) => ({\n  type: EDIT_TODO_ITEM,\n  index, event\n})","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Todolist from './components/Todolist';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Todolist />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}